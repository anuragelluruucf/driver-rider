#!/usr/bin/env python3
"""
09_master_analysis.py
Master script to run all analyses in sequence
Generates all tables, figures, and models for the research paper
"""

import os
import sys
import time
import subprocess
import pandas as pd

def create_directories():
    """Create all necessary output directories"""
    directories = ['tables', 'figures', 'models', 'data']
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
    print("✓ Created output directories")

def check_data_availability():
    """Check if required data files exist"""
    required_files = [
        'shadowfax_processed-data-final.csv'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("\n⚠️  Missing required data files:")
        for file in missing_files:
            print(f"   - {file}")
        print("\nPlease ensure all data files are present before running analysis.")
        return False
    
    print("✓ All required data files found")
    return True

def run_analysis_script(script_name, description):
    """Run a single analysis script and capture output"""
    print(f"\n{'='*80}")
    print(f"Running: {description}")
    print(f"Script: {script_name}")
    print('='*80)
    
    start_time = time.time()
    
    try:
        # Run the script
        result = subprocess.run(
            [sys.executable, script_name],
            capture_output=True,
            text=True,
            check=True
        )
        
        # Print output
        if result.stdout:
            print(result.stdout)
        
        elapsed_time = time.time() - start_time
        print(f"\n✓ Completed in {elapsed_time:.1f} seconds")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"\n❌ Error running {script_name}:")
        print(e.stderr)
        return False
    except FileNotFoundError:
        print(f"\n❌ Script not found: {script_name}")
        return False

def generate_summary_report():
    """Generate a summary report of all outputs"""
    
    report = """
# ANALYSIS SUMMARY REPORT
Generated by master_analysis.py

## Output Files Generated

### LaTeX Tables (./tables/)
"""
    
    # List all generated tables
    if os.path.exists('tables'):
        tables = sorted([f for f in os.listdir('tables') if f.endswith('.tex')])
        for table in tables:
            report += f"- {table}\n"
    
    report += "\n### Figures (./figures/)\n"
    
    # List all generated figures
    if os.path.exists('figures'):
        figures = sorted([f for f in os.listdir('figures') if f.endswith('.png')])
        for figure in figures:
            report += f"- {figure}\n"
    
    report += "\n### Models (./models/)\n"
    
    # List all saved models
    if os.path.exists('models'):
        models = sorted([f for f in os.listdir('models') if f.endswith('.pkl')])
        for model in models:
            report += f"- {model}\n"
    
    report += "\n### Data Files (./data/)\n"
    
    # List generated data files
    if os.path.exists('data'):
        data_files = sorted([f for f in os.listdir('data') if f.endswith('.csv')])
        for data_file in data_files:
            report += f"- {data_file}\n"
    
    # Save report
    with open('ANALYSIS_SUMMARY.md', 'w') as f:
        f.write(report)
    
    print("\n✓ Generated ANALYSIS_SUMMARY.md")

def main():
    """Main execution function"""
    
    print("="*80)
    print("MASTER ANALYSIS PIPELINE")
    print("Strategic Cancellation Detection in Food Delivery")
    print("="*80)
    
    # Check prerequisites
    print("\nChecking prerequisites...")
    create_directories()
    
    if not check_data_availability():
        print("\n❌ Analysis cannot proceed without required data files.")
        return
    
    # Define analysis pipeline
    analyses = [
        ('01_data_exploration.py', 'Data Exploration and Summary Statistics'),
        ('02_theoretical_framework.py', 'Theoretical Framework Implementation'),
        ('03_hypothesis_testing.py', 'Hypothesis Testing (H1-H5)'),
        ('04_labeling_framework.py', 'Strategic Detection Framework'),
        ('05_model_comparison.py', 'Model Comparison and Validation'),
        ('06_cold_start_analysis.py', 'Cold-Start Risk Modeling'),
        ('07_economic_impact.py', 'Economic Impact Analysis'),
        ('08_robustness_checks.py', 'Robustness Checks and Sensitivity')
    ]
    
    # Track success
    successful_analyses = []
    failed_analyses = []
    
    # Run each analysis
    total_start_time = time.time()
    
    for script, description in analyses:
        if os.path.exists(script):
            success = run_analysis_script(script, description)
            if success:
                successful_analyses.append(script)
            else:
                failed_analyses.append(script)
        else:
            print(f"\n⚠️  Skipping {script} - file not found")
            failed_analyses.append(script)
    
    # Summary
    total_elapsed = time.time() - total_start_time
    
    print("\n" + "="*80)
    print("ANALYSIS COMPLETE")
    print("="*80)
    print(f"\nTotal execution time: {total_elapsed/60:.1f} minutes")
    print(f"\nSuccessful analyses: {len(successful_analyses)}/{len(analyses)}")
    
    if failed_analyses:
        print("\n⚠️  Failed analyses:")
        for script in failed_analyses:
            print(f"   - {script}")
    
    # Generate summary report
    generate_summary_report()
    
    print("\n" + "="*80)
    print("NEXT STEPS")
    print("="*80)
    print("\n1. Review generated tables in ./tables/")
    print("2. Review generated figures in ./figures/")
    print("3. Check ANALYSIS_SUMMARY.md for complete output list")
    print("4. Use generated LaTeX tables and figures in your research paper")
    print("\nAll analysis outputs are ready for inclusion in your paper!")

if __name__ == "__main__":
    main()